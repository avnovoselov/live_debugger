// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Queue is an autogenerated mock type for the queue type
type Queue[T interface{}] struct {
	mock.Mock
}

type Queue_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Queue[T]) EXPECT() *Queue_Expecter[T] {
	return &Queue_Expecter[T]{mock: &_m.Mock}
}

// Append provides a mock function with given fields: element
func (_m *Queue[T]) Append(element T) uint64 {
	ret := _m.Called(element)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(T) uint64); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Queue_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type Queue_Append_Call[T interface{}] struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - element T
func (_e *Queue_Expecter[T]) Append(element interface{}) *Queue_Append_Call[T] {
	return &Queue_Append_Call[T]{Call: _e.mock.On("Append", element)}
}

func (_c *Queue_Append_Call[T]) Run(run func(element T)) *Queue_Append_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *Queue_Append_Call[T]) Return(_a0 uint64) *Queue_Append_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Queue_Append_Call[T]) RunAndReturn(run func(T) uint64) *Queue_Append_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue[T] {
	mock := &Queue[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
